package %%TARGET_PACKAGE%%;

import %%THRIFT_TYPE_FULL_NAME%%;

import org.apache.kafka.common.errors.SerializationException;
import org.apache.kafka.common.serialization.Deserializer;
import org.apache.thrift.TDeserializer;
import org.apache.thrift.TSerializer;
import org.apache.thrift.protocol.T%%THRIFT_PROTOCOL%%Protocol;
import org.apache.thrift.protocol.TSimpleJSONProtocol;

import java.util.Map;

import javax.annotation.Generated;

@Generated("Autogenerated")
public class %%THRIFT_TYPE_NAME%%Thrift%%THRIFT_PROTOCOL%%ToJsonDeserializer implements Deserializer<String> {

	private ThreadLocal<TDeserializer> deserializer = ThreadLocal.withInitial(() -> new TDeserializer(new T%%THRIFT_PROTOCOL%%Protocol.Factory()));

	private ThreadLocal<TSerializer> serializer = ThreadLocal.withInitial(() -> new TSerializer(new TSimpleJSONProtocol.Factory()));

	@Override
	public void configure(Map<String, ?> configs, boolean isKey) {}

	@Override
	public String deserialize(String topic, byte[] data) {
		try {
			if (data == null) return null;

			%%THRIFT_TYPE_NAME%% value = new %%THRIFT_TYPE_NAME%%();
			deserializer.get().deserialize(value, data);
			return serializer.get().toString(value);

		} catch (Exception e) {
			throw new SerializationException(e);
		}
	}

	@Override
	public void close() {}

}
